image: python:3.12

# Cache pour les dépendances Python
cache:
  paths:
    - .cache/pip
    - venv/

# Définition des stages
stages:
  - test
  - lint
  - docs
  - build

# Variables globales
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHONPATH: "$CI_PROJECT_DIR"

# Installation des dépendances
.setup: &setup
  before_script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install pytest pytest-cov flake8 black sphinx sphinx-rtd-theme

# Job de test
test:
  <<: *setup
  stage: test
  script:
    - pytest --cov=src tests/ --cov-report=xml --cov-report=term-missing
  coverage: '/^TOTAL.*\s+(\d+)%$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml

# Job de vérification du style de code
lint:
  <<: *setup
  stage: lint
  script:
    - flake8 src/ tests/ --max-line-length=88 --exclude=__pycache__
    - black --check src/ tests/
  allow_failure: true # Permet au pipeline de continuer même si le linting échoue

# Job de génération de documentation
docs:
  <<: *setup
  stage: docs
  script:
    - cd docs
    - sphinx-build -b html source build
  artifacts:
    paths:
      - docs/build
    expire_in: 1 week

# Job de création du package
build:
  <<: *setup
  stage: build
  script:
    - python setup.py sdist bdist_wheel
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

# Règles pour l'exécution du pipeline
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "production"'
    - if: '$CI_COMMIT_BRANCH =~ /^feature\/.*/'
    - if: "$CI_COMMIT_TAG"
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
